library HealLifestealRestore requires Events {

// Variables

	public integer EVENT_HEAL_MODIFIER;

	public integer EVENT_HEAL;

	public integer EVENT_LIFESTEAL_MODIFIER;

	public integer EVENT_LIFESTEAL;

	public integer EVENT_RESTORE_MODIFIER;

	public integer EVENT_RESTORE;

	SummativeText TempText;

	// Debug Variables
	public boolean DebugHeal = false;

	// Getters Variables
	real HealAmount = 0.0;
	unit HealedUnit = null;
	unit HealingUnit = null;
	real OverHeal = 0.0;

	real LifestealAmount = 0.0;
	unit LifestealedUnit = null;
	real OverLifesteal = 0.0;

	real RestoredAmount = 0.0;
	unit RestoredUnit = null;
	unit RestoringUnit = null;
	real OverRestore = 0.0;

// Tech Functions

	function dbg(string msg) {
		if (DebugHeal) Debug(msg);
	}

// API

	// Event Getters

	public function GetHealAmount() -> real {
		debug if (
			!IsEventRun(EVENT_HEAL_MODIFIER) &&
			!IsEventRun(EVENT_HEAL)
		) {
			Error("E3", "Использованиe API ивента вне его области: " + GetEventName(GetEventId()));
		}
		return HealAmount;
	}
	public function GetHealedUnit() -> unit {
		debug if (
			!IsEventRun(EVENT_HEAL_MODIFIER) &&
			!IsEventRun(EVENT_HEAL)
		) {
			Error("E3", "Использованиe API ивента вне его области: " + GetEventName(GetEventId()));
		}
		return HealedUnit;
	}
	public function GetHealingUnit() -> unit {
		debug if (
			!IsEventRun(EVENT_HEAL_MODIFIER) &&
			!IsEventRun(EVENT_HEAL)
		) {
			Error("E3", "Использованиe API ивента вне его области: " + GetEventName(GetEventId()));
		}
		return HealingUnit;
	}
	public function GetOverHeal() -> real {
		debug DebugEvent(EVENT_HEAL);
		return OverHeal;
	}

	public function GetLifestealAmount() -> real {
		debug if (
			!IsEventRun(EVENT_LIFESTEAL_MODIFIER) &&
			!IsEventRun(EVENT_LIFESTEAL)
		) {
			Error("E3", "Использованиe API ивента вне его области: " + GetEventName(GetEventId()));
		}
		return LifestealAmount;
	}
	public function GetLifestealedUnit() -> unit {
		debug if (
			!IsEventRun(EVENT_LIFESTEAL_MODIFIER) &&
			!IsEventRun(EVENT_LIFESTEAL)
		) {
			Error("E3", "Использованиe API ивента вне его области: " + GetEventName(GetEventId()));
		}
		return LifestealedUnit;
	}
	public function GetOverLifesteal() -> real {
		debug DebugEvent(EVENT_LIFESTEAL);
		return OverLifesteal;
	}

	public function GetRestoredAmount() -> real {
		debug if (
			!IsEventRun(EVENT_RESTORE_MODIFIER) &&
			!IsEventRun(EVENT_RESTORE)
		) {
			Error("E3", "Использованиe API ивента вне его области: " + GetEventName(GetEventId()));
		}
		return RestoredAmount;
	}
	public function GetRestoredUnit() -> unit {
		debug if (
			!IsEventRun(EVENT_RESTORE_MODIFIER) &&
			!IsEventRun(EVENT_RESTORE)
		) {
			Error("E3", "Использованиe API ивента вне его области: " + GetEventName(GetEventId()));
		}
		return RestoredUnit;
	}
	public function GetRestoringUnit() -> unit {
		debug if (
			!IsEventRun(EVENT_RESTORE_MODIFIER) &&
			!IsEventRun(EVENT_RESTORE)
		) {
			Error("E3", "Использованиe API ивента вне его области: " + GetEventName(GetEventId()));
		}
		return RestoringUnit;
	}
	public function GetOverRestore() -> real {
		debug DebugEvent(EVENT_RESTORE);
		return OverRestore;
	}

	// Event Setters

	public function SetHealAmount(real healAmount) {
		debug DebugEvent(EVENT_HEAL_MODIFIER);
		HealAmount = healAmount;
	}
	public function SetLifestealAmount(real lifestealAmount) {
		debug DebugEvent(EVENT_LIFESTEAL_MODIFIER);
		LifestealAmount = lifestealAmount;
	}
	public function SetRestoredAmount(real restoredAmount) {
		debug DebugEvent(EVENT_RESTORE_MODIFIER);
		RestoredAmount = restoredAmount;
	}

	// Functions

	public function HealUnit(unit healingUnit, unit healedUnit, real amount) {
		HealAmount = amount;
		HealedUnit = healedUnit;
		HealingUnit = healingUnit;
		OverHeal = 0.0;

		ExecuteEvent(EVENT_HEAL_MODIFIER);

		if (HealAmount > 0.0) {
			OverHeal = MaxReal(0, HealAmount - (GetUnitMaxLife(HealedUnit) - GetUnitState(HealedUnit, UNIT_STATE_LIFE)));
			SetUnitState(HealedUnit, UNIT_STATE_LIFE, GetUnitState(HealedUnit, UNIT_STATE_LIFE) + HealAmount);
			ExecuteEvent(EVENT_HEAL);
		}

		HealAmount = 0.0;
		HealedUnit = null;
		HealingUnit = null;
		OverHeal = 0.0;
	}

	public function LifestealUnit(unit whichUnit, real amount) {
		LifestealAmount = amount;
		LifestealedUnit = whichUnit;
		OverLifesteal = 0.0;

		ExecuteEvent(EVENT_LIFESTEAL_MODIFIER);

		if (LifestealAmount > 0.0) {
			OverLifesteal = MaxReal(0, LifestealAmount - (GetUnitMaxLife(LifestealedUnit) - GetUnitState(LifestealedUnit, UNIT_STATE_LIFE)));
			SetUnitState(LifestealedUnit, UNIT_STATE_LIFE, GetUnitState(LifestealedUnit, UNIT_STATE_LIFE) + LifestealAmount);
			ExecuteEvent(EVENT_LIFESTEAL);
		}

		LifestealAmount = 0.0;
		LifestealedUnit = null;
		OverLifesteal = 0.0;
	}

	public function RestoreManaUnit(unit restoringUnit, unit restoredUnit, real amount) {
		RestoredAmount = amount;
		RestoredUnit = restoredUnit;
		RestoringUnit = restoringUnit;
		OverRestore = 0.0;

		ExecuteEvent(EVENT_RESTORE_MODIFIER);

		if (RestoredAmount > 0.0) {
			OverRestore = MaxReal(0, RestoredAmount - (GetUnitState(RestoredUnit, UNIT_STATE_MAX_MANA) - GetUnitState(RestoredUnit, UNIT_STATE_MANA)));
			SetUnitState(RestoredUnit, UNIT_STATE_MANA, GetUnitState(RestoredUnit, UNIT_STATE_MANA) + RestoredAmount);
			ExecuteEvent(EVENT_RESTORE);
		}

		RestoredAmount = 0.0;
		RestoredUnit = null;
		RestoringUnit = null;
		OverRestore = 0.0;
	}

	function onInit() {
		RegisterAction(EVENT_HEAL, function() {
			TempText = AddSummativeTextToUnitForPlayer(GetOwningPlayer(GetHealingUnit()), GetHealedUnit(), HEAL_TEXT, GetHealAmount(), "");
			TempText.showToPlayer(GetOwningPlayer(GetHealedUnit()));
			if (IsMapDuel())
				TempText.showToObservers();
		});

		RegisterAction(EVENT_LIFESTEAL, function() {
			TempText = AddSummativeTextToUnitForPlayer(GetOwningPlayer(GetLifestealedUnit()), GetLifestealedUnit(), HEAL_TEXT, GetLifestealAmount(), "");
			if (IsMapDuel())
				TempText.showToObservers();
			DestroyEffect(AddSpecialEffectTarget("Abilities\\Spells\\Undead\\VampiricAura\\VampiricAuraTarget.mdx", GetLifestealedUnit(), "origin"));
		});

		RegisterAction(EVENT_RESTORE, function() {
			TempText = AddSummativeTextToUnitForPlayer(GetOwningPlayer(GetRestoredUnit()), GetRestoredUnit(), MANA_TEXT, GetRestoredAmount(), "");
			if (IsMapDuel())
				TempText.showToObservers();
		});

		EVENT_HEAL_MODIFIER = CreateEvent("EVENT_HEAL_MODIFIER");
		EVENT_HEAL = CreateEvent("EVENT_HEAL");
		EVENT_LIFESTEAL_MODIFIER = CreateEvent("EVENT_LIFESTEAL_MODIFIER");
		EVENT_LIFESTEAL = CreateEvent("EVENT_LIFESTEAL");
		EVENT_RESTORE_MODIFIER = CreateEvent("EVENT_RESTORE_MODIFIER");
		EVENT_RESTORE = CreateEvent("EVENT_RESTORE");
	}

}

