library UnitData requires Modifiers {

// Variables

	public UnitData TempData = 0; 

	// Hash Variables
	key UNIT_DATA_HID;

// API Functions

	public function Unit(unit whichUnit) -> UnitData {
		return UnitData.get(whichUnit);
	}

	public function Arrow(unit whichUnit) -> ArrowData {
		return UnitData.get(whichUnit).arrow;
	}

// Structures

	public struct UnitData {
		unit u;

		//real movespeed = 0.;
		ArrowData arrow_atr = 0;

		static method create(unit whichUnit) -> UnitData {
			UnitData this = UnitData.allocate();
			this.u = whichUnit;
			SaveInteger(HT, GetHandleId(whichUnit), UNIT_DATA_HID, this);
			return this;
		}

		method destroy() {
			RemoveSavedInteger(HT, GetHandleId(u), UNIT_DATA_HID);
			if (IsSet(arrow_atr))
				arrow_atr.destroy();
			u = null;
			this.deallocate();
		}

		static method load(integer hashId) -> UnitData {
			return LoadInteger(HT, hashId, UNIT_DATA_HID);
		}

		static method get(unit whichUnit) -> UnitData {
			UnitData this = UnitData.load(GetHandleId(whichUnit)); 
			if (!IsSet(this))
				this = UnitData.create(whichUnit);
			return this;
		}

		method operator arrow() -> ArrowData {
			if (!IsSet(arrow_atr))
				arrow_atr = ArrowData.create();
			return arrow_atr;
		}
	}

	public struct ArrowData {
		unit simulateType = null;
		unit caster = null;
		real damage = 0.;
		real distance = 0.;
		real distanceTravel = 0.;
		real scale = 0.;
		real finalScale = 0.;
		real scaleSpeed = 0.;
		real speed = 0.;
		real angle = 0.;
		real zScale = 0.;
		damagetype damageType = null;
		attacktype attackType = null;
		boolean pierce = false;
		group unitGroup_atr = null;

		static method create() -> ArrowData {
			ArrowData this = ArrowData.allocate();
			return this;
		}

		method operator unitGroup() -> group {
			if (unitGroup_atr == null)
				unitGroup_atr = CreateGroup();
			return unitGroup_atr;
		}

		method destroy() {
			damageType = null;
			attackType = null;
			DestroyGroup(unitGroup_atr); unitGroup_atr = null;
			this.deallocate();
		}
	}

}
