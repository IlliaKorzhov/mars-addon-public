library Events requires Heroes {

	public boolean DEBUG_EVENT = false;

	trigger EventTriggers[500];
	boolean EventIsRun[500];
	string EventName[500];
	integer EventId = GetHandleId(EVENT_UNIT_PAWN_ITEM) + 1;

	integer RunningId[100];
	integer RunningCount = 0;

	public function CreateEvent(string name) -> integer {
		EventId += 1;
		EventTriggers[EventId] = CreateTrigger();
		EventIsRun[EventId] = false;
		EventName[EventId] = name;
		return EventId;
	}

	public function IsEventRun(integer eventId) -> boolean {
		return EventIsRun[eventId];
	}

	public function GetEventName(integer eventId) -> string {
		return EventName[eventId];
	}

	public function GetEventId() -> integer {
		return RunningId[RunningCount];
	}

	public function DebugEvent(integer eventId) {
		if (!IsEventRun(eventId)) Error("E3", "Использованиe API ивента вне его области: " + GetEventName(eventId));
	}

	public function ExecuteEvent(integer eventId) {
		debug if (IsEventRun(eventId)) Error("E3", "Повторная инициализиация ивента: " + GetEventName(eventId));
		RunningCount = RunningCount + 1;
		RunningId[RunningCount] = eventId;
		EventIsRun[eventId] = true;
		TriggerExecute(EventTriggers[eventId]);
		EventIsRun[GetEventId()] = false;
		RunningId[RunningCount] = 0;
		RunningCount = RunningCount - 1;
	}

	public integer EVENT_ENTER;

	public function RegisterAction(integer eventId, code action) -> triggeraction {
		if (EventTriggers[eventId] == null) {
			// GAME EVENTS
			if (eventId >= GetHandleId(EVENT_GAME_VICTORY) && eventId <= GetHandleId(EVENT_GAME_BUILD_SUBMENU) ||
				eventId >= GetHandleId(EVENT_GAME_LOADED) && eventId <= GetHandleId(EVENT_GAME_SAVE)
			) {
				EventTriggers[eventId] = CreateTrigger();
				TriggerRegisterGameEvent(EventTriggers[eventId], ConvertGameEvent(eventId));
			} else

			// PLAYER EVENTS
			if (eventId >= GetHandleId(EVENT_PLAYER_STATE_LIMIT) && eventId <= GetHandleId(EVENT_PLAYER_END_CINEMATIC) ||
				eventId >= GetHandleId(EVENT_PLAYER_ARROW_LEFT_DOWN) && eventId <= GetHandleId(EVENT_PLAYER_ARROW_UP_UP)
			) {
				EventTriggers[eventId] = CreateTrigger();
				for (0 <= Index < bj_MAX_PLAYER_SLOTS) {
					TriggerRegisterPlayerEvent(EventTriggers[eventId], Player(Index), ConvertPlayerEvent(eventId));
				}
			} else

			// PLAYER UNIT EVENTS
			if (eventId >= GetHandleId(EVENT_PLAYER_UNIT_ATTACKED) && eventId <= GetHandleId(EVENT_PLAYER_UNIT_LOADED) ||
				eventId >= GetHandleId(EVENT_PLAYER_UNIT_SELL) && eventId <= GetHandleId(EVENT_PLAYER_UNIT_PAWN_ITEM)
			) {
				EventTriggers[eventId] = CreateTrigger();
				for (0 <= Index < bj_MAX_PLAYER_SLOTS) {
					TriggerRegisterPlayerUnitEvent(EventTriggers[eventId], Player(Index), ConvertPlayerUnitEvent(eventId), null);
				}
			} else
			
			{
				debug Error("E1", "Попытка зарегистрировать действие для неизвестного события ID:" + I2S(eventId));
				return null;
			}
		}
		return TriggerAddAction(EventTriggers[eventId], action);
	}

	public function UnregisterAction(integer eventId, triggeraction action) {
		if (EventTriggers[eventId] == null) {
			debug Error("E2", "Попытка очистить действие для неизвестного события ID:" + I2S(eventId));
			return;
		}
		TriggerRemoveAction(EventTriggers[eventId], action);
	}

	function onInit() {
		region mapArea = CreateRegion();
		EVENT_ENTER = CreateEvent("EVENT_ENTER");
		RegionAddRect(mapArea, GetWorldBounds());
		TriggerRegisterEnterRegion(EventTriggers[EVENT_ENTER], mapArea, Condition(function() -> boolean {
			return !IsUnitDummy(GetTriggerUnit());
		}));
	}

}
