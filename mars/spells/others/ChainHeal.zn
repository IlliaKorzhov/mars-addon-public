library ChainHeal requires SpellGetters, BJHooked {

	struct ChainHeal {
		unit caster;
		unit target;
		real value;
		real reduction;
		integer countTargets;
		real radius;

		group grHealedUnits;
		timer tm;
		static integer CK_HID = 0;
		static real TIMER_PERIOD = 0.25;

		static method create(unit caster, unit target, real value, real reduction, integer countTargets, real radius) -> ChainHeal {
			ChainHeal this = ChainHeal.allocate();
			this.caster = caster;
			this.target = target;
			this.value = value;
			this.reduction = reduction;
			this.countTargets = countTargets;
			this.radius = radius;

			this.grHealedUnits = CreateGroup();
			this.tm = CreateTimer();

			SaveInteger(HT, GetHandleId(this.tm), CK_HID, this);
			TimerStart(this.tm, TIMER_PERIOD, true, function ChainHeal.callback);
			this.action(caster, target);
			return this;
		}

		method destroy() {
			caster = null;
			target = null;

			DestroyGroup(grHealedUnits); grHealedUnits = null;
			FlushChildHashtable(HT, GetHandleId(tm)); PauseTimer(tm); DestroyTimer(tm); tm = null;
			
			this.deallocate();
		}

		method action(unit target1, unit target2) {
			CreateUnitLightningTarget(target1, target2, "HWPB", "", "", "Abilities\\Spells\\Orc\\HealingWave\\HealingWaveTarget.mdl", "origin", 1.4, 10000, 50., 0.75, true);
			HealUnit(caster, target2, value);
			value = value - (value * reduction);
			countTargets = countTargets - 1;
			GroupAddUnit(grHealedUnits, target2);

			target = target2;

			if (countTargets <= 0) {
				this.destroy();
			}
		}

		static method callback() {
			ChainHeal this = LoadInteger(HT, GetHandleId(GetExpiredTimer()), CK_HID);
			group g = CreateGroup();
			real x = GetUnitX(target);
			real y = GetUnitY(target);
			unit newTarget;

			This = this;
			GroupEnumUnitsInRangeFiz(g, x, y, radius, Condition(function() -> boolean {
				ChainHeal this = This;
				FilterUnit = GetFilterUnit();
				return
					UnitAlive(FilterUnit) &&
					IsUnitAlly(FilterUnit, GetOwningPlayer(caster)) &&
					!IsUnitInGroup(FilterUnit, grHealedUnits) &&
					!IsUnitType(FilterUnit, UNIT_TYPE_STRUCTURE) &&
					!IsUnitType(FilterUnit, UNIT_TYPE_MECHANICAL) &&
					!IsUnitType(FilterUnit, UNIT_TYPE_TAUREN);
			}));

			FilteredUnit = FirstOfGroup(g);
			ForGroup(g, function() {
				ChainHeal this = This;
				EnumUnit = GetEnumUnit();
				if (GetUnitLifePercentHook(FilteredUnit) > GetUnitLifePercentHook(EnumUnit)) {
					FilteredUnit = EnumUnit;
				}
			});

			newTarget = FilteredUnit;
			if (newTarget != null) {
				this.action(target, newTarget);
			} else {
				 this.destroy();
			}

			newTarget = null;
			DestroyGroup(g);
			g = null;
		}

	}

	public function CastChainHeal(
		unit caster,            //кастер
		unit target,            //цель
		real value,             //величина исцеления
		real reduction,         //коефициент снижения исцеления
		integer countTargets,   //количество целей
		real radius             //максимальный раидус исцеления
	) {
	   ChainHeal current;
	   current = ChainHeal.create(caster, target, value, reduction, countTargets, radius);
	}

}
