library ArthasDome requires BuffActions {

	constant integer ABILITY_ID = 'A24R';		//равкод кастуемой абилки
	constant integer UNIT_DOME_ID = 'e065';		//равкод юнита-купол
	constant integer UNIT_PULSE_ID = 'e066';	//равкод юнита-пульсации

	constant integer BUFF_ID = 'A251';			//равкод баффа
	constant integer BUFF_BUFF_ID = 'B09A';		//равкод заклинания баффа

	constant integer TALENT_ID = 'A24T';

	constant real RANGE_MAX = 480;				//максимальный радиус купола
	constant real RANGE_START = 100;			//начальный радиус (RANGE_START < RANGE_MAX)
	
	constant real TIME_INC = 1.4;		//время роста купола
	constant real TIME_LIFE = 8.;		//время жизни купола (в абилке нужно ставить "Следовать в течении времени = 8 + 1.4 = 9.4")
	constant real TIME_LIFE_END = 2.;	//время жизни купола после окончания поддерживания
	
	constant real TIME_ATT = 0.75;		//время притягивания юнитов
	constant real POWER_ATT = 5;		//сила притяжения (скалируется от текущего и максимального радиусов купола, а также дистанции от центра купола до юнита)
	constant real RAD_NOT_ATT = 100;	//если юнит в этом радиусе, то сила притяжения будет равна 0, также вляет на силу притяжение юнитов за этим радиусом
	
	constant real TIME_STUN = 2.0;		//время стана юнитов
	
	constant real DELAY_PULSE = 0.75;			//задрежка пульсации
	constant real CD_PULSE = 1;					//кд пульсации
	constant real DMG_PULSE = 200;				//урон от пульсации
	constant real HEAL_PULSE = 300;				//хил от пульсации
	constant real RAD_PULSE = 200;				//стандартный радиус пульсации (от купола) (скалируется от текущего и максимального радиуса)
	constant real DELAY_HIT_PULSE = 0.35;		//стандартная задержка хита юнита от пульсации (также скалируется дистанцией)
	constant integer STUN_TYPE = NORMAL_STUN;	//тип стана

	constant string EFF_HEAL_PULSE = "Abilities\\Spells\\Human\\Heal\\HealTarget.mdl";	//эффект хила от пульсации
	constant string EFF_DMG_PULSE = "";													//эффект урона от пульсации

	constant string EFF_ATT = "Abilities\\Spells\\Other\\Incinerate\\IncinerateBuff.mdl";				//эффект притягивания
	constant string EFF_ATT_ATTACH = "chest";									//аттач эффекта

	
	struct Dome {
		unit caster;
		unit dome;
		real x;
		real y;
		real range;
		integer tic;
		real timeLife;

		group grCollide;
		group grStunned;
		group grBuffed;

		boolean isIncreased;
		boolean needSupport;

		timer tmAction;
		timer tmPulse;

		trigger trg;

		static real INTERVAL = 1./32.;
		static real INTERVAL_TM = 1./40.;
		static key DISTANCE_HID;
			
		static method create(unit caster, boolean needsSupport) -> Dome {
			Dome this = Dome.allocate();
			this.caster = caster;
			this.x = GetUnitX(caster);
			this.y = GetUnitY(caster);
			this.dome = CreateUnit(GetOwningPlayer(caster), UNIT_DOME_ID, x, y, 270.);
			this.range = RANGE_START;
			this.isIncreased = false;
			this.timeLife = TIME_LIFE_END;
			this.tic = 0;
			this.needSupport = needsSupport;

			this.grCollide = CreateGroup();
			this.grStunned = CreateGroup();
			this.grBuffed = CreateGroup();

			SetUnitScale(dome, 0, 0, 0);
			SetUnitAnimation(dome, "Stand One");

			this.tmAction = CreateTimer();
			SaveHandleDataInt(tmAction, this);
			TimerStart(tmAction, 0, false, function Dome.action);
			TimerStart(tmAction, INTERVAL, true, function Dome.action);

			this.trg = CreateTrigger();
			TriggerRegisterUnitEvent(trg, caster, EVENT_UNIT_SPELL_ENDCAST);
			SaveHandleDataInt(trg, this);
			TriggerAddCondition(trg, Condition(function() -> boolean {
				return GetSpellAbilityId() == ABILITY_ID;
			}));
			TriggerAddAction(trg, function() {
				Dome this = LoadHandleDataInt(GetTriggeringTrigger());
				this.ends(true);
				FlushTrigger(trg);
			});

			return this;
		}
		
		method destroy() {
			EnumUnit = FirstOfGroup(grBuffed);
			while (EnumUnit != null) {
				DestroyUnitBuff(EnumUnit, GetUnitBuffByType(EnumUnit, ARTHAS_DOME_TID), true);
				GroupRemoveUnit(grBuffed, EnumUnit);
				EnumUnit = FirstOfGroup(grBuffed);
			}
			caster = null;
			KillUnit(dome); dome = null;
			DestroyGroup(grCollide); grCollide = null;
			DestroyGroup(grStunned); grStunned = null;
			FlushTimer(tmAction); tmAction = null;
			FlushTimer(tmPulse); tmPulse = null;
			trg = null;
			this.deallocate();
		}
		
		static method action() {
			Dome this = LoadHandleDataInt(GetExpiredTimer());

			if (!isIncreased && tic * INTERVAL <= TIME_INC * ((RANGE_MAX - RANGE_START) / RANGE_MAX) && range < RANGE_MAX) {
				range = range + (RANGE_MAX / (TIME_INC / INTERVAL));
				SetUnitScale(dome, range / 250., range / 250., range / 250.);

				TempGroup = CreateGroup();
				This = this;
				GroupEnumUnitsInRangeFiz(TempGroup, x, y, range, Condition(function() -> boolean {
						Dome this = This;
						FilterUnit = GetFilterUnit();
						return
							UnitAlive(FilterUnit) &&
							!IsUnitType(FilterUnit, UNIT_TYPE_STRUCTURE) &&
							!IsUnitType(FilterUnit, UNIT_TYPE_MECHANICAL) &&
							!IsUnitType(FilterUnit, UNIT_TYPE_TAUREN) &&
							IsUnitEnemy(caster, GetOwningPlayer(FilterUnit)) &&
							!IsUnitInGroup(FilterUnit, grStunned) &&
							DistanceBetweenCoords(x, y, GetUnitX(FilterUnit), GetUnitY(FilterUnit)) >= range
						;
				}));

				EnumUnit = FirstOfGroup(TempGroup);
				while (EnumUnit != null) {
					GroupAddUnit(grStunned, EnumUnit);

					StunUnit(caster, EnumUnit, STUN_TYPE, TIME_STUN);

					TempTimer = CreateTimer();
					SaveHandleDataInt(TempTimer, this);
					SaveHandleDataUnit(TempTimer, EnumUnit);
					SaveHandleDataReal(TempTimer, 0.);
					DestroyEffect(AddSpecialEffectTarget(EFF_ATT, EnumUnit, EFF_ATT_ATTACH));
					TimerStart(TempTimer, INTERVAL_TM, true, function() {
						timer expiredTimer = GetExpiredTimer();
						Dome this = LoadHandleDataInt(expiredTimer);
						unit stunned = LoadHandleDataUnit(expiredTimer);
						real elapsedTime = LoadHandleDataReal(expiredTimer) + INTERVAL;
						Point2D point = Point2D.createAtWidget(stunned);

						if (elapsedTime <= TIME_ATT && IsUnitCanBeMoved(caster, stunned)) {
							point.movePolar(
								(POWER_ATT * RANGE_MAX / 250) * ((point.distToCoords(x, y) - RAD_NOT_ATT) /  RANGE_MAX) * 2,
								point.angleToCoords(x, y)
							);
							SetUnitPositionSmooth(stunned, point.x, point.y);
						} else {
							GroupRemoveUnit(grStunned, stunned);
							FlushTimer(expiredTimer);
						}
						
						SaveHandleDataReal(expiredTimer, elapsedTime);
						point.destroy();
						stunned = null;
						expiredTimer = null;
					});

					GroupRemoveUnit(TempGroup, EnumUnit);
					EnumUnit = FirstOfGroup(TempGroup);
				}

				DestroyGroup(TempGroup);
			} else if (!isIncreased) {
				this.ends(false);
			}

			if (isIncreased && tic * INTERVAL >= timeLife) {
				this.destroy();
			} else {

				TempGroup = CreateGroup();
				This = this;
				GroupEnumUnitsInRange(TempGroup, x, y, range + 250, Condition(function() -> boolean {
						Dome this = This;
						FilterUnit = GetFilterUnit();
						return
							UnitAlive(FilterUnit) &&
							!IsUnitType(FilterUnit, UNIT_TYPE_STRUCTURE) &&
							!IsUnitType(FilterUnit, UNIT_TYPE_MECHANICAL) &&
							!IsUnitType(FilterUnit, UNIT_TYPE_TAUREN) &&
							IsUnitEnemy(caster, GetOwningPlayer(FilterUnit)) &&
							!IsUnitInGroup(FilterUnit, grStunned) &&
							!IsUnitInGroup(FilterUnit, grCollide) &&
							(
								(IsUnitInRangeXY(FilterUnit, x, y, range) && !IsUnitInRangeXY(FilterUnit, x, y, range - 50)) ||
								(IsUnitInRangeXY(FilterUnit, x, y, range - 50) && !IsUnitInRangeXY(FilterUnit, x, y, range - 100))
							)
						;
				}));

				EnumUnit = FirstOfGroup(TempGroup);
				while (EnumUnit != null) {
					GroupAddUnit(grCollide, EnumUnit);

					TempTimer = CreateTimer();
					SaveHandleDataInt(TempTimer, this);
					SaveHandleDataUnit(TempTimer, EnumUnit);
					SaveHandleDataReal(TempTimer, DistanceBetweenCoords(x, y, GetUnitX(EnumUnit), GetUnitY(EnumUnit)));
					TimerStart(TempTimer, INTERVAL_TM, true, function() {
						timer expiredTimer = GetExpiredTimer();
						Dome this = LoadHandleDataInt(expiredTimer);
						unit collideOne = LoadHandleDataUnit(expiredTimer);
						real distance = LoadHandleDataReal(expiredTimer);
						Point2D point = Point2D.createAtWidget(collideOne);
						if (caster == null) {
							//SetUnitVertexColor(collideOne, 255, 255, 255, 255);
							GroupRemoveUnit(grCollide, collideOne);
							FlushTimer(expiredTimer);
						} else if (IsUnitInRangeXY(collideOne, x, y, range) && 
							!IsUnitInRangeXY(collideOne, x, y, range - 50)
						) {
							//SetUnitVertexColor(collideOne, 0, 255, 0, 255);
							if (AngleNormalize(AngleDifference(point.angleToCoords(x, y), GetUnitFacing(collideOne))) > 95.) {
								//SetUnitVertexColor(collideOne, 255, 255, 255, 255);
								GroupRemoveUnit(grCollide, collideOne);
								FlushTimer(expiredTimer);
							} else if (point.distToCoords(x, y) < distance) {
								SetUnitX(collideOne, GetPolarOffsetX(x, distance, point.angleFromCoords(x, y)));
								SetUnitY(collideOne, GetPolarOffsetY(y, distance, point.angleFromCoords(x, y)));
							}
						} else if (IsUnitInRangeXY(collideOne, x, y, range - 50) && 
							!IsUnitInRangeXY(collideOne, x, y, range - 100)
						) {
							//SetUnitVertexColor(collideOne, 0, 0, 255, 255);
							if (AngleNormalize(AngleDifference(point.angleToCoords(x, y), GetUnitFacing(collideOne))) < 80.) {
								//SetUnitVertexColor(collideOne, 255, 255, 255, 255);
								GroupRemoveUnit(grCollide, collideOne);
								FlushTimer(expiredTimer);
							} else if (point.distToCoords(x, y) > distance) {
								SetUnitX(collideOne, GetPolarOffsetX(x, distance, point.angleFromCoords(x, y)));
								SetUnitY(collideOne, GetPolarOffsetY(y, distance, point.angleFromCoords(x, y)));
							}
						} else {
							//SetUnitVertexColor(collideOne, 255, 255, 255, 255);
							GroupRemoveUnit(grCollide, collideOne);
							FlushTimer(expiredTimer);
						}
						
						point.destroy();
						collideOne = null;
						expiredTimer = null;
					});
					GroupRemoveUnit(TempGroup, EnumUnit);
					EnumUnit = FirstOfGroup(TempGroup);
				}

				DestroyGroup(TempGroup);

				TempGroup = CreateGroup();
				This = this;
				GroupEnumUnitsInRange(TempGroup, x, y, range + 100, Condition(function() -> boolean {
						Dome this = This;
						FilterUnit = GetFilterUnit();
						return
							UnitAlive(FilterUnit) &&
							!IsUnitType(FilterUnit, UNIT_TYPE_STRUCTURE) &&
							!IsUnitType(FilterUnit, UNIT_TYPE_MECHANICAL) &&
							!IsUnitType(FilterUnit, UNIT_TYPE_TAUREN) &&
							IsUnitInRangeXY(FilterUnit, x, y, range - 50) &&
							!IsUnitInGroup(FilterUnit, grBuffed)
						;
				}));

				EnumUnit = FirstOfGroup(TempGroup);
				while (EnumUnit != null) {
					GroupAddUnit(grBuffed, EnumUnit);
					AddBuffToUnit(caster, EnumUnit, ARTHAS_DOME_TID, ARTHAS_DOME_TID, 0, 0, 0, false, true, true, false, 0, true, true, false, false, 1);
					GroupRemoveUnit(TempGroup, EnumUnit);
					EnumUnit = FirstOfGroup(TempGroup);
				}

				This = this;
				ForGroup(grBuffed, function() {
					Dome this = This;
					unit enumUnit = GetEnumUnit();
					if (!IsUnitInRangeXY(enumUnit, x, y, range - 50)) {
						DestroyUnitBuff(enumUnit, GetUnitBuffByType(enumUnit, ARTHAS_DOME_TID), true);
						GroupRemoveUnit(grBuffed, enumUnit);
					}
				});

				DestroyGroup(TempGroup);
			}
			
			tic = tic + 1;
		}
		
		method ends(boolean isInterrupted) {
			if (!isIncreased) {
				SetUnitAnimation(dome, "Stand Two");
				tic = 0;
				tmPulse = CreateTimer();

				SaveHandleDataInt(tmPulse, this);
				TimerStart(tmPulse, DELAY_PULSE, false, function Dome.pulseAction);
			}
			
			isIncreased = true;
			
			if (!isInterrupted || !needSupport) {
				this.timeLife = TIME_LIFE + TIME_LIFE_END;
			} else {
				this.timeLife = TIME_LIFE_END;
				tic = 0;
			}
		}
		
		static method pulseAction() {
			Dome this = LoadHandleDataInt(GetExpiredTimer());
			unit pulse = CreateUnit(GetOwningPlayer(dome), UNIT_PULSE_ID, x, y, 270.);
			SetUnitScale(pulse, range / 250., range / 250., range / 250.);
			UnitApplyTimeLifeHide(pulse, 1);

			TempGroup = CreateGroup();
			GroupEnumUnitsInRangeFiz(TempGroup, x, y, range + (RAD_PULSE * RANGE_MAX / 250) * range / RANGE_MAX, Condition(function FilterAll));
			
			EnumUnit = FirstOfGroup(TempGroup);
			while (EnumUnit != null) {
				if (!IsUnitInRange(EnumUnit, dome, range)) {
					TempTimer = CreateTimer();
					SaveHandleDataInt(TempTimer, this);
					SaveHandleDataUnit(TempTimer, EnumUnit);
					TimerStart(TempTimer, DELAY_HIT_PULSE * ((DistanceBetweenCoords(x, y, GetUnitX(EnumUnit), GetUnitY(EnumUnit)) - range) / ((RAD_PULSE * RANGE_MAX / 250) * range / RANGE_MAX)), false, function() {
						timer expiredTimer = GetExpiredTimer();
						Dome this = LoadHandleDataInt(expiredTimer);
						unit enum = LoadHandleDataUnit(expiredTimer);
						FlushTimer(expiredTimer);
						if (!IsUnitAlly(enum, GetOwningPlayer(caster))) {
							UnitDamageToTarget(dome, enum, DMG_PULSE, ATTACK_TYPE_CHAOS, DAMAGE_TYPE_UNIVERSAL, true, false, false, false, false);
							EffectApplyTimedLife(AddSpecialEffectTarget(EFF_DMG_PULSE, enum, "origin"), 2);
						} else if (IsUnitAlly(enum, GetOwningPlayer(caster))) {
							HealUnit(caster, enum, HEAL_PULSE);
							EffectApplyTimedLife(AddSpecialEffectTarget(EFF_HEAL_PULSE, enum, "origin"), 2);
						}
						expiredTimer = null;
						enum = null;
					});
				} else {
					if (!IsUnitAlly(EnumUnit, GetOwningPlayer(caster))) {
						UnitDamageToTarget(dome, EnumUnit, DMG_PULSE, ATTACK_TYPE_CHAOS, DAMAGE_TYPE_UNIVERSAL, true, false, false, false, false);
						EffectApplyTimedLife(AddSpecialEffectTarget(EFF_DMG_PULSE, EnumUnit, "origin"), 2);
					} else if (IsUnitAlly(EnumUnit, GetOwningPlayer(caster))) {
						HealUnit(caster, EnumUnit, HEAL_PULSE);
						EffectApplyTimedLife(AddSpecialEffectTarget(EFF_HEAL_PULSE, EnumUnit, "origin"), 2);
					}
				}

				GroupRemoveUnit(TempGroup, EnumUnit);
				EnumUnit = FirstOfGroup(TempGroup);
			}
			
			DestroyGroup(TempGroup);
			TimerStart(tmPulse, CD_PULSE, false, function Dome.pulseAction);
			pulse = null;
		}
		
	}

	function onInit() {
		SpellEffectAddAction(function() {
			if (GetSpellAbilityId() == ABILITY_ID)
				Dome.create(GetTriggerUnit(), !UnitHasMefisto(GetTriggerUnit()));
		});

		BuffAddAction(function() {
			if (GetTriggerBuffActionsId() == ARTHAS_DOME_TID) {
				if (GetTriggerBuffIsEntered()) {
					UnitAddAbilityPermanent(GetTriggerBuffTarget(), BUFF_ID);
				}
				if (GetTriggerBuffIsOut()) {
					UnitRemoveAbility(GetTriggerBuffTarget(), BUFF_ID);
					UnitRemoveAbility(GetTriggerBuffTarget(), BUFF_BUFF_ID); 
				}
			}
		});

		PostDamageModifierAddAction(INDEX_ORDER_AMOUNT, function() {
			Buff domeBuffAttacker, domeBuffTarget;
			if (!IsModifierDodge() && IsModifierAttack() && !IsUnitDummy(GetModifierAttackingUnit())) {
				domeBuffAttacker = GetUnitBuffByType(GetModifierAttackingUnit(), ARTHAS_DOME_TID);
				domeBuffTarget   = GetUnitBuffByType(GetModifierAttackedUnit(), ARTHAS_DOME_TID);

				if (IsSet(domeBuffAttacker) &&
					UnitHasTalent(GetBuffOwnerUnit(domeBuffAttacker), TALENT_ID) &&
					!IsPlayerAlly(GetOwningPlayer(GetModifierAttackingUnit()), GetOwningPlayer(GetBuffOwnerUnit(domeBuffAttacker)))
				) {
					SetModifierDamageTaken(
						GetModifierDamageTaken() - GetBlockedFromAmount(GetModifierDamageTaken())
					);
					return;
				}

				if (IsSet(domeBuffTarget) &&
					UnitHasTalent(GetBuffOwnerUnit(domeBuffTarget), TALENT_ID) &&
					IsPlayerAlly(GetOwningPlayer(GetModifierAttackingUnit()), GetOwningPlayer(GetBuffOwnerUnit(domeBuffAttacker)))
				) {
					return;
				}

				if (IsSet(domeBuffTarget) && !IsSet(domeBuffAttacker)) {
					SetModifierDamageTaken(
						GetModifierDamageTaken() - GetBlockedFromAmount(GetModifierDamageTaken())
					);
				}
			}
		});
	}

}