library BuffActions requires Buffs, SetUnitMaxState {

	unit BUFF_OWNER_UNIT_GET;
	unit BUFF_TARGET_UNIT_GET;
	boolean BUFF_IS_ENTERED_GET;
	boolean BUFF_IS_OUT_GET;
	boolean BUFF_IS_ACTIONS_GET;
	boolean BUFF_IS_TRANSFER_GET;
	integer BUFF_ACTIONS_ID_GET;
	integer BUFF_ID_GET;
	timer BUFF_STACK_GET;

	public function GetTriggerBuffOwner() -> unit {return BUFF_OWNER_UNIT_GET;}
	public function GetTriggerBuffTarget() -> unit {return BUFF_TARGET_UNIT_GET;}
	public function GetTriggerBuffIsEntered() -> boolean {return BUFF_IS_ENTERED_GET;}
	public function GetTriggerBuffIsOut() -> boolean {return BUFF_IS_OUT_GET;}
	public function GetTriggerBuffIsActions() -> boolean {return BUFF_IS_ACTIONS_GET;}
	public function GetTriggerBuffIsTransfer() -> boolean {return BUFF_IS_TRANSFER_GET;}
	public function GetTriggerBuffActionsId() -> integer {return BUFF_ACTIONS_ID_GET;}
	public function GetTriggerBuffId() -> integer {return BUFF_ID_GET;}
	public function GetTriggerBuffStack() -> timer {return BUFF_STACK_GET;}

	public function BuffActions() {
		unit ownerUnit = OwnerUnit;
		unit targetUnit = TargetUnit;
		boolean isEntered = IsEntered;
		boolean isOut = IsOut;
		boolean isActions = IsActions;
		boolean isTransfer = IsTransfer;
		integer actionsId = ActionsId;
		integer buffId = BuffId;
		timer buffStack = BuffStack;

		BUFF_OWNER_UNIT_GET = ownerUnit;
		BUFF_TARGET_UNIT_GET = targetUnit;
		BUFF_IS_ENTERED_GET = isEntered;
		BUFF_IS_OUT_GET = isOut;
		BUFF_IS_ACTIONS_GET = isActions;
		BUFF_IS_TRANSFER_GET = isTransfer;
		BUFF_ACTIONS_ID_GET = actionsId;
		BUFF_ID_GET = BuffId;
		BUFF_STACK_GET = buffStack;

		ExecuteEvent(EVENT_BUFF);

		if (actionsId == BUFF_POS_TID) {
			if (isEntered) {
				UnitAddAbilityPermanent(targetUnit, 'A00L');
			}
			if (isOut) {
				UnitRemoveAbility(targetUnit, 'A00L');
				UnitRemoveAbility(targetUnit, 'B001'); // buff
			}
		}

		if (actionsId == BUFF_NEG_TID) {
			if (isEntered) {
				UnitAddAbilityPermanent(targetUnit, 'A00M');
			}
			if (isOut) {
				UnitRemoveAbility(targetUnit, 'A00M');
				UnitRemoveAbility(targetUnit, 'B002'); // buff
			}
		}

		if (actionsId == BUFF_STACKABLE_TID) {
			if (isEntered) {
				dbgT("[Enter] BI" + I2S(buffId) + " BS=" + I2S(GetBuffStacks(buffId)) + " IsTransfer=" + GetBooleanValue(isTransfer));
				if (GetBuffStacks(buffId) == 1) {
					UnitAddAbilityPermanent(targetUnit, 'A00L');
					UnitAddAbilityPermanent(targetUnit, 'A00Q');
				}
				SetUnitAbilityLevelSwapped('A00Q', targetUnit, GetBuffStacks(buffId));
			}
			if (isOut) {
				dbgT("[Out] BI" + I2S(buffId) + " BS=" + I2S(GetBuffStacks(buffId)) + " IsTransfer=" + GetBooleanValue(isTransfer));
				if (GetBuffStacks(buffId) == 0) {
					UnitRemoveAbility(targetUnit, 'A00Q');
					UnitRemoveAbility(targetUnit, 'A00L');
					UnitRemoveAbility(targetUnit, 'B001'); // buff
				} else {
					SetUnitAbilityLevelSwapped('A00Q', targetUnit, GetBuffStacks(buffId));
				}
			}
		}

		if (actionsId == arthas4buff_tid) { // Arthas 4
			if (isEntered) {
				UnitAddAbilityPermanent(targetUnit, 'A24Q');
			}
			if (isOut) {
				TempGroup = CreateGroup();
				UnitRemoveAbility(targetUnit, 'A24Q');
				UnitRemoveAbility(targetUnit, 'B098'); // buff
				udg_Smart_Real[1] = 500 + GetBuffDataReal(buffId)*0.5;
				UnitDamagePureToTarget(ownerUnit, targetUnit, udg_Smart_Real[1]);
				DestroyEffect(AddSpecialEffectTarget("war3mapImported\\Heaven's Gate.mdx", targetUnit, "origin"));
				GroupEnumUnitsInRangeFiz(TempGroup, GetUnitX(targetUnit), GetUnitY(targetUnit), 300, ConditionParameters(function FilterRectangleSplash, ownerUnit, targetUnit, 0));
	
				EnumUnit = FirstOfGroup(TempGroup);
				while (EnumUnit != null) {
					DestroyEffect(AddSpecialEffectTarget("Abilities\\Spells\\Human\\HolyBolt\\HolyBoltSpecialArt.mdl", EnumUnit, "origin"));
					UnitDamagePureToTarget(ownerUnit, EnumUnit, udg_Smart_Real[1]*0.5);
					GroupRemoveUnit(TempGroup, EnumUnit);
					EnumUnit = FirstOfGroup(TempGroup);
				}

				GroupEnumUnitsInRangeFiz(TempGroup, GetUnitX(targetUnit), GetUnitY(targetUnit), 300, ConditionWithOwner(function FilterAlly, ownerUnit));
		
				EnumUnit = FirstOfGroup(TempGroup);
				while (EnumUnit != null) {
					DestroyEffect(AddSpecialEffectTarget("Abilities\\Spells\\Human\\HolyBolt\\HolyBoltSpecialArt.mdl", EnumUnit, "origin"));
					HealUnit(ownerUnit, EnumUnit, udg_Smart_Real[1]*0.5);
					if (UnitHasTalent(ownerUnit, 'A25O')) {
						AddBuffToUnit(ownerUnit , EnumUnit , ridgevortexer_tid , ridgevortexer_tid , 4 , 1 , 2 , false , true , false, false, 0, true , true , false , false , 4);
						udg_Debuff_Caster_Strong = EnumUnit;
						TriggerExecute( gg_trg_Debuff_Strong );
					}
					GroupRemoveUnit(TempGroup, EnumUnit);
					EnumUnit = FirstOfGroup(TempGroup);
				}
				DestroyGroup(TempGroup);
			}
		}

		ownerUnit = null;
		targetUnit = null;
		buffStack = null;

		BUFF_OWNER_UNIT_GET = null;
		BUFF_TARGET_UNIT_GET = null;
		BUFF_IS_ENTERED_GET = false;
		BUFF_IS_OUT_GET = false;
		BUFF_IS_ACTIONS_GET = false;
		BUFF_IS_TRANSFER_GET = false;
		BUFF_ACTIONS_ID_GET = 0;
		BUFF_ID_GET = 0;
		BUFF_STACK_GET = null;
	}

}
