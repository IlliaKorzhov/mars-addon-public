library Doubles requires StaticProjectiles {

	public struct Doubles {
		static integer Count = 2;

		static real Range = 150.;	//range + phys size
		static real Speed = 900.;
		static real Delay = 0.5;

		static real RemainingTime = 60.;
		static real DamageGiven = 0.5;
		static real DamageTaken = 2.;

		static string EffInit = "Abilities\\Spells\\Orc\\MirrorImage\\MirrorImageCaster.mdx";
		static string EffMissile = "Abilities\\Spells\\Orc\\MirrorImage\\MirrorImageMissile.mdx";

		static method start(unit owner, integer typeId) {
			Point2D start = Point2D.createAtWidget(owner);
			Point2D position;
			integer randomIndex = GetRandomInt(0, Count);
			group doubles = LoadGroupHandle(HT, GetHandleId(owner), typeId);
	
			if (doubles == null) {
				doubles = CreateGroup();
				SaveGroupHandle(HT, GetHandleId(owner), typeId, doubles);
			}
	
			EnumUnit = FirstOfGroup(doubles);
			while (EnumUnit != null) {
				KillUnit(EnumUnit);
				GroupRemoveUnit(doubles, EnumUnit);
				EnumUnit = FirstOfGroup(doubles);
			}
	
			for (0 <= Index <= Count) {
				position = Point2D.clone(start);
				position.movePolar(Range, 360.0 / (Count + 1) * Index) ;
				position.approachClosestAvailablePoint(start);
	
				if (Index == randomIndex) {
					EnumUnit = owner;
					SetUnitPosition(EnumUnit, position.x, position.y);
				} else {
					EnumUnit = GetIllusionUnit(CreateIllusion(GetOwningPlayer(owner), owner, 0, 0, 0));
					SetIllusionDamageGiven(GetLastCreatedIllusion(), DamageGiven);
					SetIllusionDamageTaken(GetLastCreatedIllusion(), DamageTaken);
					GroupAddUnit(doubles, EnumUnit);
					SetUnitPosition(EnumUnit, position.x, position.y);
					Double.create(owner, EnumUnit, start.x, start.y, Speed, Delay, RemainingTime, EffInit, EffMissile);
				}
	
				position.destroy();
			}
	
			Double.create(owner, owner, start.x, start.y, Speed, Delay, RemainingTime, EffInit, EffMissile);
	
			start.destroy();
			Doubles.refresh();
		}

		static method refresh() {
			Range = 150.;
			Speed = 900.;
			Delay = 0.5;

			RemainingTime = 60.;
			DamageGiven = 0.5;
			DamageTaken = 2.;

			EffInit = "Abilities\\Spells\\Orc\\MirrorImage\\MirrorImageCaster.mdx";
			EffMissile = "Abilities\\Spells\\Orc\\MirrorImage\\MirrorImageMissile.mdx";
		}

	}

	public struct Double {
		unit owner;
		unit double;
		unit dummyMissile;
		unit dummyEffInit;
		unit dummyVision;
		effect effMissile;
		effect effInit;
		real x, y;

		timer tm;

		real speed, delay, remainingTime;
		string effInitStr, effMissileStr;

		static constant real INTERVAL = 1./40.;

		static method create(unit owner, unit double, real x, real y, real speed, real delay, real remainingTime, string effInitStr, string effMissileStr) -> Double {
			Double this = Double.allocate();
			this.owner = owner;
			this.double = double;
			this.x = x;
			this.y = y;
			this.speed = speed;
			this.delay = delay;
			this.remainingTime = remainingTime;
			this.effInitStr = effInitStr;
			this.effMissileStr = effMissileStr;

			this.tm = CreateTimer();
			SaveHandleDataInt(tm, this);
		
			SetUnitPathing(double, false);
			MakeUnitInvulnerable(double, true);
		
			ShowUnit(double, false);
			if (owner == double) {
				dummyEffInit = CreateUnit(GetOwningPlayer(owner), DUMMY_EFF_ID, x, y, GetUnitFacing(owner));
				effInit = AddSpecialEffectTarget(effInitStr, dummyEffInit, "origin");
				dummyVision = CreateUnit(GetOwningPlayer(owner), DUMMY_VSN_600, x, y, GetUnitFacing(owner));
			}

			TimerStart(tm, delay, false, function() {
				Double this = LoadHandleDataInt(GetExpiredTimer());
				FlushTimer(GetExpiredTimer());
				this.dummyMissile = CreateUnit(GetOwningPlayer(owner), DUMMY_EFF_ID, x, y, GetUnitFacing(owner));
				this.effMissile = AddSpecialEffectTarget(effMissileStr, dummyMissile, "origin");
				CreateStaticProjectileAtFunc(this, dummyMissile, GetUnitX(double), GetUnitY(double), dummyMissile, Double.end.name, speed, 0., 0.);

			});
			return this;
		}
		
		method destroy() {
			SetUnitPathing(double, true);
			ShowUnit(double, true);
			SetUnitAnimation(double, "stand");
			if (owner == double) SelectUnitForPlayerSingle(double, GetOwningPlayer(owner));
			if (IsUnitIllusion(double)) SetIllusionRemainingTime(GetUnitIllusion(double), remainingTime);
			MakeUnitInvulnerable(double, false);

			DestroyEffect(effMissile); effMissile = null;
			DestroyEffect(effInit); effInit = null;
			owner = null;
			double = null;
			ShowUnit(dummyMissile, false); KillUnit(dummyMissile); dummyMissile = null;
			KillUnit(dummyEffInit); dummyEffInit = null;
			ShowUnit(dummyVision, false); KillUnit(dummyVision); dummyVision = null;
			FlushTimer(tm); tm = null;
			this.deallocate();
		}
		
		static method end() {
			Double this = GetSpellObject();

			this.destroy();
		}
		
	}

}