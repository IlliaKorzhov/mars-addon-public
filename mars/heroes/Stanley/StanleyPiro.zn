library StanleyPiro requires Events {

	// Пиромания
	integer spellIdR = 'A0D2';      // равкод способности
	integer abilityEffIdR = 'A1JO'; // равкод способности-эффекта

	constant real EXPLODE_DELAY_TIME = 3.;
	constant string EXPLODE_DELAY_SOUND = "Sound\\Interface\\BattleNetTick.wav";
	constant string EXPLODE_DELAY_EFF = "Abilities\\Spells\\Other\\ImmolationRed\\ImmolationRedDamage.mdx";

	constant real dmgInitR = 1000.;          // изначальный урон
	constant real rangeInitR = 400.;         // радиус нанесения изначального урона
	constant real factDmgMaxR = 2.;          // максимальный коэффициент урона
	constant real factDmgMinR = 0.25;        // минимальный коэффициент урона
	constant real dmgInitPerR = 400.;        // урон в секунду от изначального поджога

	constant real dmgFireR = 300.;           // урон в секунду от поджога за героем
	constant real rangeFireR = 200.;         // радиус области поджога за героем
	constant real dmgCasterR = 200.;         // урон в секунду самому герою
	constant real distLocR = rangeFireR / 2; // Дистанция между создаваемыми точками проверки области поджога

	constant real durationAbilityR = 10.;    // время действия способности
	constant real durationFireR = 10.;       // время подоженной земли

	constant integer numEffInitR = 6;        // количество стартовых эффектов способности

	// модель и количество маленьких эффектов по всей изначальной области поджога
	constant string effEffPerR = "Abilities\\Spells\\Human\\FlameStrike\\FlameStrikeEmbers.mdl";
	constant integer numEffPerR = 150;

	// модель, количество, размер и дистанция эффектов по окружности
	constant string effEffPerR01 = "Environment\\LargeBuildingFire\\LargeBuildingFire1.mdl";
	constant integer numEffPerR01 = 25;
	constant real scaleEffPerR01 = 140.;         // размер эффекта в процентах
	constant real distEffPerR01 = rangeInitR - 50.; // дистанция от эпицентра

	// модель и количество эффектов создаваемые в области поджога за героями
	constant string effEffFireR = "Abilities\\Spells\\Human\\FlameStrike\\FlameStrikeEmbers.mdl";
	constant integer numEffFireR = 15;

	// модель эффекта и точка крепления на самом герое
	constant string effCasterR = "Abilities\\Spells\\Other\\ImmolationRed\\ImmolationRedTarget.mdl";
	constant string attachCasterR = "chest";

	sound Sound;
		
	key casterInitR_hid;
	key targetInitR_hid;
	key xInitR_hid;
	key yInitR_hid;
		
	key casterPerFireR_hid;
	key xFireCasterR_hid;
	key yFireCasterR_hid;
	key hashTimerFireR_hid;
	key timeFireR_hid;
		
	key numLocR_hid;
		
	key casterPerR_hid;
	key xPerR_hid;
	key yPerR_hid;
	key timePerR_hid;
		
	unit tempUnit01;
	unit tempUnit02;
	real tempX;
	real tempY;
	
	// Пиромания
	function ActionsForGroupFilterR() -> boolean {
		tempUnit02 = GetFilterUnit();
		return UnitAlive(tempUnit02) && !IsUnitAlly(tempUnit02, GetOwningPlayer(tempUnit01)) && !IsUnitType(tempUnit02, UNIT_TYPE_MAGIC_IMMUNE) && !IsUnitType(tempUnit02, UNIT_TYPE_MECHANICAL);
	}
	
	function BogRandoma() -> real {
		return RMinBJ(RMaxBJ(GetRandomReal(0, rangeInitR), GetRandomReal(0, rangeInitR)), RMaxBJ(GetRandomReal(0, rangeInitR), GetRandomReal(0, rangeInitR)));
	}
	
	function BogRandomaFire() -> real {
		return RMinBJ(RMaxBJ(GetRandomReal(0, rangeFireR), GetRandomReal(0, rangeFireR)), RMaxBJ(GetRandomReal(0, rangeFireR), GetRandomReal(0, rangeFireR)));
	}
	
	function PeriodicFireEndR() {
		timer tm2 = GetExpiredTimer();
		integer tm2Id = GetHandleId(tm2);
		timer hashTm = LoadTimerHandle(HT, tm2Id, hashTimerFireR_hid);
		integer hashTmId = GetHandleId(hashTm);
		integer numLoc = LoadInteger(HT, tm2Id, numLocR_hid);
		

		RemoveLocation(LoadLocationHandle(HT, hashTmId, numLoc));
		
		RemoveSavedHandle(HT, hashTmId, numLoc);
		RemoveSavedHandle(HT, tm2Id, hashTimerFireR_hid);
		RemoveSavedInteger(HT, tm2Id, numLocR_hid);
		FlushChildHashtable(HT, tm2Id);
			
		PauseTimer(tm2);
		DestroyTimer(tm2);
		tm2 = null;
		hashTm = null;
	}
	
	function PeriodicFireR() {
		timer tm1 = GetExpiredTimer();
		timer tm2 = CreateTimer();
		integer tm1Id = GetHandleId(tm1);
		integer tm2Id = GetHandleId(tm2);
		timer hashTm = LoadTimerHandle(HT, tm1Id, hashTimerFireR_hid);
		integer hashTmId = GetHandleId(hashTm);
		unit caster = LoadUnitHandle(HT, tm1Id, casterPerFireR_hid);
		real x = LoadReal(HT, tm1Id, xFireCasterR_hid);
		real y = LoadReal(HT, tm1Id, yFireCasterR_hid);
		real time = LoadReal(HT, tm1Id, timeFireR_hid);
		integer i;
		integer iEnd;
		real deltaAngle;
		
		if (UnitAlive(caster) && time < durationAbilityR) {
			SaveReal(HT, tm1Id, timeFireR_hid, time + 0.2);
			UnitDamageTargetBJ(caster, caster, dmgCasterR * 0.2, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_MAGIC);
			if (DistanceBetweenCoords(GetUnitX(caster), GetUnitY(caster), x, y) > distLocR) {
				SaveReal(HT, tm1Id, xFireCasterR_hid, GetUnitX(caster));
				SaveReal(HT, tm1Id, yFireCasterR_hid, GetUnitY(caster));
				SaveInteger(HT, hashTmId, 0, LoadInteger(HT, hashTmId, 0) + 1);
				SaveLocationHandle(HT, hashTmId, LoadInteger(HT, hashTmId, 0), Location(GetUnitX(caster), GetUnitY(caster)));
				SaveTimerHandle(HT, tm2Id, hashTimerFireR_hid, hashTm);
				SaveInteger(HT, tm2Id, numLocR_hid, LoadInteger(HT, hashTmId, 0));
				TimerStart(tm2, durationFireR, false, function PeriodicFireEndR);
				i = 1;
				iEnd = numEffFireR;
				deltaAngle = 360. / iEnd;
				for (1 <= i <= iEnd) {
					EffectApplyTimedLife(AddSpecialEffect(effEffFireR, GetPolarOffsetX(GetUnitX(caster), BogRandomaFire(), i * deltaAngle),  GetPolarOffsetY(GetUnitY(caster), BogRandomaFire(), i * deltaAngle)), durationFireR);
				}
			}
		} else {
			RemoveSavedHandle(HT, tm1Id, hashTimerFireR_hid);
			RemoveSavedHandle(HT, tm1Id, casterPerFireR_hid);
			RemoveSavedReal(HT, tm1Id, xFireCasterR_hid);
			RemoveSavedReal(HT, tm1Id, yFireCasterR_hid);
			RemoveSavedReal(HT, tm1Id, timeFireR_hid);
			FlushChildHashtable(HT, tm1Id);
			PauseTimer(tm1);
			DestroyTimer(tm1);
		}

		
		tm1 = null;
		tm2 = null;
		hashTm = null;
		caster = null;
	}
	
	function PeriodicForGroupR() {
		if (IsUnitInRangeXY(GetEnumUnit(), tempX, tempY, rangeInitR)) {
			UnitDamageTargetBJ(tempUnit01, GetEnumUnit(), dmgInitPerR, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_MAGIC);
		} else {
			UnitDamageTargetBJ(tempUnit01, GetEnumUnit(), dmgFireR, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_MAGIC);
		}
	}
	
	function PeriodicR() {
		timer tm = GetExpiredTimer();
		integer tmId = GetHandleId(tm);
		timer hashTm = LoadTimerHandle(HT, tmId, hashTimerFireR_hid);
		integer hashTmId = GetHandleId(hashTm);
		unit caster = LoadUnitHandle(HT, tmId, casterPerR_hid);
		real x = LoadReal(HT, tmId, xPerR_hid);
		real y = LoadReal(HT, tmId, yPerR_hid);
		real time = LoadReal(HT, tmId, timePerR_hid);
		group gr = CreateGroup();
		integer i;
		integer iEnd;
		location loc;
		
		SaveReal(HT, tmId, timePerR_hid, time + 1);
		if (time < durationAbilityR + durationFireR) {
			tempUnit01 = caster;
			tempX = x;
			tempY = y;
			GroupEnumUnitsInRangeFiz(gr, x, y, rangeInitR, Condition(function ActionsForGroupFilterR));
			
			i = 1;
			iEnd = LoadInteger(HT, hashTmId, 0);
			for (1 <= i <= iEnd) {
				loc = LoadLocationHandle(HT, hashTmId, i);
				if (loc != null) {
					GroupEnumUnitsInRangeFiz(gr, GetLocationX(loc), GetLocationY(loc), rangeFireR, Condition(function ActionsForGroupFilterR));
				}
			}
		
			ForGroup(gr, function PeriodicForGroupR);
		} else {
			i = 1;
			iEnd = LoadInteger(HT, hashTmId, 0);
			for (1 <= i <= iEnd) {
				RemoveLocation(LoadLocationHandle(HT, hashTmId, i));
				RemoveSavedHandle(HT, hashTmId, i);
			}
			RemoveSavedInteger(HT, hashTmId, 0);
			RemoveSavedHandle(HT, tmId, hashTimerFireR_hid);
			RemoveSavedHandle(HT, tmId, casterPerR_hid);
			RemoveSavedReal(HT, tmId, xPerR_hid);
			RemoveSavedReal(HT, tmId, yPerR_hid);
			RemoveSavedReal(HT, tmId, timePerR_hid);
			FlushChildHashtable(HT, tmId);
			FlushChildHashtable(HT, hashTmId);
			PauseTimer(tm);
			DestroyTimer(tm);
			PauseTimer(hashTm);
			DestroyTimer(hashTm);
		}
		
		tm = null;
		hashTm = null;
		caster = null;
		DestroyGroup(gr);
		gr = null;
		loc = null;
	}
	
	function ActionsForGroupTimerR() {
		timer tm = GetExpiredTimer();
		integer tmId = GetHandleId(tm);
		unit caster = LoadUnitHandle(HT, tmId, casterInitR_hid);
		unit target = LoadUnitHandle(HT, tmId, targetInitR_hid);
		real x = LoadReal(HT, tmId, xInitR_hid);
		real y = LoadReal(HT, tmId, yInitR_hid);
		real dist = DistanceBetweenCoords(x, y, GetUnitX(target), GetUnitY(target));
		if (UnitAlive(target)) {
			UnitDamageTargetBJ(caster, target, dmgInitR * (factDmgMaxR - ((factDmgMaxR - factDmgMinR) / rangeInitR * dist)), ATTACK_TYPE_NORMAL, DAMAGE_TYPE_MAGIC);
		}
		RemoveSavedHandle(HT, tmId, casterInitR_hid);
		RemoveSavedHandle(HT, tmId, targetInitR_hid);
		RemoveSavedReal(HT, tmId, xInitR_hid);
		RemoveSavedReal(HT, tmId, yInitR_hid);
		FlushChildHashtable(HT, tmId);
		DestroyTimer(tm);
		tm = null;
		caster = null;
		target = null;
	}
	
	function ActionsForGroupR() {
		timer tm = CreateTimer();
		integer tmId = GetHandleId(tm);
		unit target = GetEnumUnit();
		real dist = DistanceBetweenCoords(GetUnitX(tempUnit01), GetUnitY(tempUnit01), GetUnitX(target), GetUnitY(target));
		SaveUnitHandle(HT, tmId, casterInitR_hid, tempUnit01);
		SaveUnitHandle(HT, tmId, targetInitR_hid, target);
		SaveReal(HT, tmId, xInitR_hid, GetUnitX(tempUnit01));
		SaveReal(HT, tmId, yInitR_hid, GetUnitY(tempUnit01));
		TimerStart(tm, 0. + 0.55 * (1 / rangeInitR * dist), false, function ActionsForGroupTimerR);
		target = null;
		tm = null;
	}

	function EffectsR() {
		timer effTm = GetExpiredTimer();
		integer effTmId = GetHandleId(effTm);
		unit caster = LoadUnitHandle(HT, effTmId, casterInitR_hid);
		real deltaAngle;
		integer i;
		integer iEnd;
		
		i = 1;
		iEnd = numEffPerR;
		deltaAngle = 360. / iEnd;
		for (1 <= i <= iEnd) {
			EffectApplyTimedLife(AddSpecialEffect(effEffPerR, GetPolarOffsetX(GetUnitX(caster), BogRandoma(), i * deltaAngle),  GetPolarOffsetY(GetUnitY(caster), BogRandoma(), i * deltaAngle)), durationAbilityR + durationFireR - 0.5);
		}
		i = 1;
		iEnd = numEffPerR01;
		deltaAngle = 360. / iEnd;
		for (1 <= i <= iEnd) {
			tempUnit01 = CreateUnit(GetOwningPlayer(caster), DUMMY_EFF_ID, GetPolarOffsetX(GetUnitX(caster), distEffPerR01, i * deltaAngle), GetPolarOffsetY(GetUnitY(caster), distEffPerR01, i * deltaAngle), GetRandomReal(0, 360));
			EffectApplyTimedLife(AddSpecialEffectTarget(effEffPerR01, tempUnit01, "origin"), durationAbilityR + durationFireR - 0.5);
			SetUnitScalePercent(tempUnit01, scaleEffPerR01, scaleEffPerR01, scaleEffPerR01);
			//SetUnitAnimationByIndex(tempUnit01, 0);
			UnitApplyTimeLife(tempUnit01, durationAbilityR + durationFireR);
		}
		
		DestroyTimer(effTm);
		effTm = null;
		
		caster = null;
	}

	function InitR(unit owner) {
		timer tm = CreateTimer();
		timer tm1 = CreateTimer();
		timer hashTm = CreateTimer();
		timer effTm = CreateTimer();
		integer tmId = GetHandleId(tm);
		integer tm1Id = GetHandleId(tm1);
		integer effTmId = GetHandleId(effTm);
		unit caster = owner;
		group gr = CreateGroup();
		real deltaAngle;
		integer i;
		integer iEnd;
		
		if (numEffInitR != 0) {
			i = 1;
			iEnd = numEffInitR;
			deltaAngle = 360. / iEnd;
			for (1 <= i <= iEnd) {
				ApplyAbility(caster, GetPolarOffsetX(GetUnitX(caster), 100., I2R(i) * deltaAngle), GetPolarOffsetY(GetUnitY(caster), 100., I2R(i) * deltaAngle), abilityEffIdR, 1, "breathoffire");
			}
		}
		
		EffectApplyTimedLife(AddSpecialEffectTarget(effCasterR, caster, attachCasterR), durationAbilityR);
		
		tempUnit01 = caster;
		GroupEnumUnitsInRangeFiz(gr, GetUnitX(caster), GetUnitY(caster), rangeInitR, Condition(function ActionsForGroupFilterR));
		ForGroup(gr, function ActionsForGroupR);
		
		SaveUnitHandle(HT, effTmId, casterInitR_hid, caster);
		TimerStart(effTm, 0.5, false, function EffectsR);
		
		SaveUnitHandle(HT, tm1Id, casterPerFireR_hid, caster);
		SaveReal(HT, tm1Id, xFireCasterR_hid, GetUnitX(caster));
		SaveReal(HT, tm1Id, yFireCasterR_hid, GetUnitY(caster));
		SaveReal(HT, tm1Id, timePerR_hid, durationAbilityR);
		SaveTimerHandle(HT, tm1Id, hashTimerFireR_hid, hashTm);
		TimerStart(tm1, 0.2, true, function PeriodicFireR);

		SaveUnitHandle(HT, tmId, casterPerR_hid, caster);
		SaveReal(HT, tmId, xPerR_hid, GetUnitX(caster));
		SaveReal(HT, tmId, yPerR_hid, GetUnitY(caster));
		SaveReal(HT, tmId, timePerR_hid, 0.);
		SaveTimerHandle(HT, tmId, hashTimerFireR_hid, hashTm);
		TimerStart(tm, 1., true, function PeriodicR);
		
		caster = null;
		DestroyGroup(gr);
		gr = null;
		tm = null;
		tm1 = null;
		hashTm = null;
		effTm = null;
	}

	struct Piro {
		unit owner;
		real timeRemaining;
		effect eff;

		timer tm;

		static real INTERVAL = 1.;

		static method create(unit owner) -> Piro {
			Piro this = Piro.allocate();
			this.owner = owner;
			this.timeRemaining = EXPLODE_DELAY_TIME + INTERVAL;
			this.eff = AddSpecialEffectTarget(EXPLODE_DELAY_EFF, owner, "chest");
			AttachSoundToUnit(Sound, owner);
			udg_Hero_HP_Reg_Scale_Main[GetUnitUserData(owner)] = ( udg_Hero_HP_Reg_Scale_Main[GetUnitUserData(owner)] + 2.50 );
			udg_Hero_MS_Simple[GetUnitUserData(owner)] = ( udg_Hero_MS_Simple[GetUnitUserData(owner)] + 50.00 );

			this.tm = CreateTimer();
			SaveHandleDataInt(this.tm, this);
			TimerStart(this.tm, 0., false, function Piro.expired);

			return this;
		}

		method destroy() {
			udg_Hero_HP_Reg_Scale_Main[GetUnitUserData(owner)] = ( udg_Hero_HP_Reg_Scale_Main[GetUnitUserData(owner)] - 2.50 );
			udg_Hero_MS_Simple[GetUnitUserData(owner)] = ( udg_Hero_MS_Simple[GetUnitUserData(owner)] - 50.00 );
			UnitDamageTargetBJ(owner, owner, 1000, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_MAGIC);
			SetUnitVertexColor(owner, 255, 255, 255, 255);
			DestroyEffect(eff); eff = null;
			owner = null;
			FlushTimer(tm); tm = null;
			this.deallocate();
		}

		static method expired() {
			Piro this = LoadHandleDataInt(GetExpiredTimer());
			string color = "";
			StopSound(Sound, false, true);
			timeRemaining -= INTERVAL;
			if (timeRemaining <= 0) {
				InitR(owner);
				this.destroy();
			} else {
				if (timeRemaining / EXPLODE_DELAY_TIME >= 0.75) {
					color = "|cfffbff23";
				} else if (timeRemaining / EXPLODE_DELAY_TIME >= 0.35) {
					color = "|cffff8902";
				} else {
					color = "|cffff0303";
				}
				SetUnitVertexColor(owner, 255, R2I(200 * timeRemaining / EXPLODE_DELAY_TIME), R2I(200 * timeRemaining / EXPLODE_DELAY_TIME), 255);
				StartSound(Sound);
				CreateCustomVelTextToUnit(owner, color + I2S(R2I(timeRemaining + 0.5)) + "...", 2., 16. - timeRemaining, 0.6, 150., 0., 0., 70.);
			}
			TimerStart(this.tm, INTERVAL, false, function Piro.expired);
		}

	}
	
	function FilterR() {
		if (GetSpellAbilityId() == spellIdR) {
			Piro.create(GetTriggerUnit());
		}
	}

	function onInit() {
		static if (IS_DEV) {
			spellIdR = 'A007';      // равкод способности
			abilityEffIdR = 'A006'; // равкод способности-эффекта
		}
		Sound = CreateSound(EXPLODE_DELAY_SOUND, false, true, true, 10, 10, "SpellsEAX");
		SetSoundParamsFromLabel(Sound, "ChatroomTimerTick");
		SetSoundDuration(Sound, 476);
		SetSoundChannel(Sound, 11);
		SetSoundVolume(Sound, 150);
		SetSoundPitch(Sound, 1.0);
		SetSoundDistances(Sound, 750.0, 100000.0);
		SetSoundDistanceCutoff(Sound, 2000.0);
		RegisterAction(GetHandleId(EVENT_PLAYER_UNIT_SPELL_EFFECT), function FilterR);
	}

}
